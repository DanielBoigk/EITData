
"""
    mean_zero_basis(n::Int, m::Int)

Generate a basis vector of length `n` that is orthonormal and has a mean of zero for the first `m` elements.

# Arguments
- `n::Int`: The total length of the basis vector.
- `m::Int`: The number of leading elements to consider for the mean zero condition.

# Returns
- A vector of length `n` where the first `m` elements are equal and set to a value that ensures the vector is orthonormal and the mean of the first `m` elements is zero when considering the entire vector.

# Notes
- The function calculates a normalization factor (`1 / sqrt((m + 1) * m)`) to ensure the vector has a norm of 1 (orthonormal property).
- The vector is constructed such that the first `m` elements are equal (set to the normalization factor), and the `(m+1)`-th element is set to `-m * norm` to counterbalance the sum of the first `m` elements, achieving a mean of zero across the vector.
- Elements beyond the `(m+1)`-th position are zero, as the vector is initialized with zeros.
- The `@inbounds` macro is used for performance by skipping bounds checking within the loop.
"""
function mean_zero_basis(n::Int, m::Int)
    out = zeros(n)  
    norm = inv(sqrt((m + 1) * m))
    @inbounds for i in 1:m
        out[i] = norm 
    end
    out[m + 1] = -m * norm 
    out
end
"""
    generate_basis_vectors(n::Int, i::Int)

Generate a matrix of basis vectors where each column is an orthonormal, mean-zero basis vector generated by `mean_zero_basis`.

# Arguments
- `n::Int`: The length of each basis vector.
- `i::Int`: The number of basis vectors to generate.

# Returns
- A matrix of size `(n, i)` where each column is a basis vector generated by calling `mean_zero_basis(n, m)` for `m` ranging from 1 to `i`.

# Notes
- This function constructs a collection of basis vectors, each satisfying the orthonormal and mean-zero conditions for increasing values of `m` (from 1 to `i`).
- It is particularly useful for creating a preliminary basis for applications like Electrical Impedance Tomography (EIT), where such vectors are needed for further computations.
- The resulting matrix can be used as a basis set for representing signals or data in EIT.
"""
function generate_basis_vectors(n::Int, i::Int)
    basis_matrix = zeros(n, i)
    for m in 1:i
        basis_matrix[:, m] = mean_zero_basis(n, m)
    end
    basis_matrix
end
"""
    subtract_column_mean!(A::Matrix, n::Int)

Subtract the mean of the first `n` rows from each column of the matrix `A` in place.

# Arguments
- `A::Matrix`: The matrix to be modified (typically containing EIT data).
- `n::Int`: The number of leading rows (boundary points) to consider for calculating the mean.

# Returns
- The modified matrix `A` with the mean of the first `n` rows subtracted from each column.

# Notes
- This function centers the data by subtracting the mean of the boundary points (assumed to be in the first `n` rows) from each column, which is a common preprocessing step in EIT.
- The operation is performed in place (modifying `A` directly) for memory efficiency.
- Requires the `Statistics` package for the `mean` function (ensure `using Statistics` is included in your code).
- The broadcasting operation `. -=` subtracts the row vector of column means from every row of `A`.
"""
function subtract_column_mean!(A::Matrix, n::Int)
    # Calculate the mean of the first n entries of each column
    col_means = mean(A[1:n, :], dims=1)

    # Subtract the mean from each element of the column
    A .-= col_means
    
    return A
end